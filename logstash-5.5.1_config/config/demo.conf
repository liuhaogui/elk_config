input {
    file {
        #path => "/test/ELK/testLog/*.log"
        path => "/Applications/XAMPP/xamppfiles/htdocs/test/untitled/data.log"
        start_position => beginning
        ignore_older => 0
        sincedb_path => "/dev/null"
        type => 'nginx'
    }
    file {
        path => "/test/ELK/event/*.log"
        #sincedb_path => "/usr/local/ELK/logstash/data/tp_event"
        type => "tp_event_ab"
        tags => "tp_event"
    }
     file {
        path => "/var/logs/spring-log/metrics-*.log"
        type => 'syslog'
        codec => json
    }
    stdin {
        add_field => {"key" => "value"}
        codec => "plain"
        tags => ["add"]
        type => "std"
    }
    udp {
        port => "5001"
        type => syslog
        codec => json
    }
    tcp {
        port => "5001"
        type => syslog
        codec => json_lines
    }
}
filter {
    grok {
        match => { "message" => "%{COMBINEDAPACHELOG}"}
    }
    geoip {
        source => "clientip"
    }
    if [logger_name] =~ "metrics" {
        kv {
            source => "message"
            field_split => ", "
            prefix => "metric_"
        }
    mutate {
          convert => { "metric_value" => "float" }
          convert => { "metric_count" => "integer" }
          convert => { "metric_min" => "float" }
          convert => { "metric_max" => "float" }
          convert => { "metric_mean" => "float" }
          convert => { "metric_stddev" => "float" }
          convert => { "metric_median" => "float" }
          convert => { "metric_p75" => "float" }
          convert => { "metric_p95" => "float" }
          convert => { "metric_p98" => "float" }
          convert => { "metric_p99" => "float" }
          convert => { "metric_p999" => "float" }
          convert => { "metric_mean_rate" => "float" }
          convert => { "metric_m1" => "float" }
          convert => { "metric_m5" => "float" }
          convert => { "metric_m15" => "float" }
        }
    }
        if [logger_name] =~ "GaugeLog" {

        kv {
            source => "message"
            field_split => ", "
            prefix => "gauge_"
        }

        mutate {
          convert => { "gauge_action" => "string" }
          convert => { "gauge_type" => "string" }
          convert => { "gauge_chain" => "integer" }
          convert => { "gauge_chain_name" => "string" }
          convert => { "gauge_client_ip" => "string" }
          convert => { "gauge_user_id" => "integer" }
          convert => { "gauge_number" => "integer" }
          convert => { "gauge_money" => "integer" }
          convert => { "gauge_coupon" => "integer" }
        }

        mutate {
            add_field => { "instance_name" => "%{app_name}-%{host}:%{app_port}" }
            add_field => { "[@metadata][LOGSTASH_DEBUG]" => "${LOGSTASH_DEBUG:false}" }
        }


    }
    mutate {
        add_field => { "instance_name" => "%{app_name}-%{host}:%{app_port}" }
        # workaround from https://github.com/elastic/logstash/issues/5115
        add_field => { "[@metadata][LOGSTASH_DEBUG]" => "${LOGSTASH_DEBUG:false}" }
    }
}
output {
    if  [type] == "gaugelog"  {
        elasticsearch {
            hosts => ["http://127.0.0.1:9200"]
            index => "gauge-%{+YYYY.MM.dd}"
            user => "elastic"
            password =>  "changeme"
        }
    }
    elasticsearch {
        hosts => ["http://127.0.0.1:9200"]
        user => elastic  
        password => changeme 
    }

#    file {
#        path => "/usr/share/logstash/pipeline/logs/%{+YYYY-MM-dd-hh}/%{app_name}-%{host}.log"
#    }

    stdout{          
        codec => rubydebug 
    }
}


